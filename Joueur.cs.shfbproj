<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- The configuration and platform will be used to determine which assemblies to include from solution and
				 project documentation sources -->
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{627feb0f-b89b-4de2-94ab-7011c1be0abd}</ProjectGuid>
    <SHFBSchemaVersion>2015.6.5.0</SHFBSchemaVersion>
    <!-- AssemblyName, Name, and RootNamespace are not used by SHFB but Visual Studio adds them anyway -->
    <AssemblyName>Documentation</AssemblyName>
    <RootNamespace>Documentation</RootNamespace>
    <Name>Documentation</Name>
    <!-- SHFB properties -->
    <FrameworkVersion>.NET Framework 4.0</FrameworkVersion>
    <OutputPath>.\Help\</OutputPath>
    <HtmlHelpName>Documentation</HtmlHelpName>
    <Language>en-US</Language>
    <BuildAssemblerVerbosity>OnlyWarningsAndErrors</BuildAssemblerVerbosity>
    <HelpFileFormat>Website</HelpFileFormat>
    <IndentHtml>False</IndentHtml>
    <KeepLogFile>True</KeepLogFile>
    <DisableCodeBlockComponent>False</DisableCodeBlockComponent>
    <CleanIntermediates>True</CleanIntermediates>
    <DocumentationSources>
      <DocumentationSource sourceFile="bin\Release\Joueur.cs.exe" />
      <DocumentationSource sourceFile="bin\Release\Joueur.cs.xml" />
    </DocumentationSources>
    <NamespaceSummaries>
      <NamespaceSummaryItem name="(global)" isDocumented="False" />
<NamespaceSummaryItem name="Joueur.cs.Games.GAME_NAME" isDocumented="True">&lt;h1&gt;GAME_NAME C# Client&lt;/h1&gt;
&lt;p&gt;This is the root of your AI. Stay out of the Joueur/ folder, it does most of the heavy lifting to play on our game servers. Your AI, and the game objects it manipulates are all in &lt;span style="display: inline; font-family: Consolas, Courier, monospace !important"&gt;Games/GAME_NAME/&lt;/span&gt;, with your very own AI living in &lt;span style="display: inline; font-family: Consolas, Courier, monospace !important"&gt;Games/GAME_NAME/ai.cs&lt;/span&gt; for you to make smarter.&lt;/p&gt;

&lt;h2&gt;How to Run&lt;/h2&gt;
&lt;p&gt;This client has been tested and confirmed to work on the Campus Windows machines loaded with Visual Studio 2013/2015, but it can work on your own Windows/Linux/Mac machines if you desire. It will &lt;strong&gt;not&lt;/strong&gt; work on the campus rc##xcs213 Linux machines however, as their version of mono is out of date.&lt;/p&gt;
&lt;h3&gt;Windows&lt;/h3&gt;
&lt;p&gt;Simply &lt;a href="https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx"&gt;installing Visual Studio 2013 or newer&lt;/a&gt; should give you everything you need, namely C#. Just open up the sln file in this repo and build + run it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: You’ll need to add &lt;a href="https://msdn.microsoft.com/en-us/library/cs8hbt1w(v=vs.90).aspx"&gt;command line args in visual studio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The args should be: &lt;span style="display: inline; font-family: Consolas, Courier, monospace !important"&gt;GAME_NAME -s r99acm.device.mst.edu -r MyOwnGameSession&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Linux&lt;/h3&gt;
&lt;p&gt;You’ll need the latest version of Mono (v4.0.4 at the moment). The package on Ubuntu’s default packages it out of date and can’t build this project. Luckily if you follow &lt;a href="http://www.mono-project.com/docs/getting-started/install/linux/"&gt;Mono’s own guide&lt;/a&gt; on Linux installation they walk you through installing the latest version.&lt;/p&gt;
&lt;p&gt;After that just do:&lt;/p&gt;
&lt;code&gt;make
.\testRun MyOwnGameSession
&lt;/code&gt;

&lt;h2&gt;Other Notes&lt;/h2&gt;
&lt;p&gt;Try not to modify the &lt;span style="display: inline; font-family: Consolas, Courier, monospace !important"&gt;.csproj&lt;/span&gt; file. The Arena runs this via Mono, and minor changes can break it for seemingly no reason. Every file in the &lt;span style="display: inline; font-family: Consolas, Courier, monospace !important"&gt;Games/&lt;/span&gt; directory is told to be auto included for compilation anyways, so if you are just adding code you shouldn’t have a need to modify it anyways.&lt;/p&gt;</NamespaceSummaryItem></NamespaceSummaries>
    <HelpFileVersion>1.0.0.0</HelpFileVersion>
    <MaximumGroupParts>2</MaximumGroupParts>
    <NamespaceGrouping>False</NamespaceGrouping>
    <SyntaxFilters>C#</SyntaxFilters>
    <SdkLinkTarget>Blank</SdkLinkTarget>
    <RootNamespaceContainer>False</RootNamespaceContainer>
    <PresentationStyle>VS2013</PresentationStyle>
    <Preliminary>False</Preliminary>
    <NamingMethod>Guid</NamingMethod>
    <HelpTitle>GAME_NAME C# Client Documentation</HelpTitle>
    <ContentPlacement>AboveNamespaces</ContentPlacement>
    <VisibleItems>Attributes, ExplicitInterfaceImplementations, InheritedMembers, InheritedFrameworkMembers, InheritedFrameworkInternalMembers, Internals, Protected, SealedProtected, ProtectedInternalAsProtected</VisibleItems>
    <ApiFilter>
      <Filter entryType="Namespace" fullName="" isExposed="False" xmlns="" />
      <Filter entryType="Namespace" fullName="Joueur.cs" isExposed="False" xmlns="" />
      <Filter entryType="Namespace" fullName="Joueur.cs.ServerMessages" isExposed="False" xmlns="" />
    </ApiFilter>
  </PropertyGroup>
  <!-- There are no properties for these groups.  AnyCPU needs to appear in order for Visual Studio to perform
			 the build.  The others are optional common platform types that may appear. -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
  </PropertyGroup>
  <!-- Import the SHFB build targets -->
  <Import Project="$(SHFBROOT)\SandcastleHelpFileBuilder.targets" />
  <!-- The pre-build and post-build event properties must appear *after* the targets file import in order to be
			 evaluated correctly. -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
    <RunPostBuildEvent>OnBuildSuccess</RunPostBuildEvent>
  </PropertyGroup>
</Project>